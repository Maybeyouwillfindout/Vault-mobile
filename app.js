
const textEncoder=new TextEncoder(),textDecoder=new TextDecoder();
async function deriveKey(e,t){const n=await crypto.subtle.importKey("raw",textEncoder.encode(e),"PBKDF2",!1,["deriveKey"]);return crypto.subtle.deriveKey({name:"PBKDF2",salt:t,iterations:200000,hash:"SHA-256"},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}
function b64(e){return btoa(String.fromCharCode(...new Uint8Array(e)))}function ub64(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0)))}
async function encryptJSON(e,t){const n=crypto.getRandomValues(new Uint8Array(12)),a=textEncoder.encode(JSON.stringify(t)),o=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},e,a);return{iv:b64(n),ct:b64(o)}}
async function decryptJSON(e,t){const n=ub64(t.iv),a=ub64(t.ct),o=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},e,a);return JSON.parse(textDecoder.decode(o))}
function idb(){return new Promise(((e,t)=>{const n=indexedDB.open("vault-db",1);n.onupgradeneeded=e=>{const e=n.result;e.objectStoreNames.contains("meta")||e.createObjectStore("meta"),e.objectStoreNames.contains("tx")||e.createObjectStore("tx",{keyPath:"id",autoIncrement:!0})},n.onsuccess=(()=>e(n.result)),n.onerror=(()=>t(n.error))}))}
async function metaSet(e,t){const n=await idb(),a=n.transaction("meta","readwrite");return a.objectStore("meta").put(t,e),a.complete}
async function metaGet(e){const t=await idb(),n=t.transaction("meta","readonly");return new Promise((e=>{const t=n.objectStore("meta").get(e);t.onsuccess=(()=>e(t.result)),t.onerror=(()=>e(void 0))}))}
async function txAdd(e){const t=await idb(),n=t.transaction("tx","readwrite");return n.objectStore("tx").add(e),n.complete}
async function txAll(){const e=await idb(),t=e.transaction("tx","readonly");return new Promise((e=>{const n=t.objectStore("tx").getAll();n.onsuccess=(()=>e(n.result)),n.onerror=(()=>e([]))}))}
let aesKey=null,salt=null;async function ensureSalt(){let e=await metaGet("salt");if(!e){const t=crypto.getRandomValues(new Uint8Array(16));e=b64(t),await metaSet("salt",e)}return ub64(e)}
async function login(e){salt=await ensureSalt(),aesKey=await deriveKey(e,salt);let t=await metaGet("marker");if(!t){const e=await encryptJSON(aesKey,{ok:!0,createdAt:Date.now()});await metaSet("marker",e)}else await decryptJSON(aesKey,t);localStorage.setItem("vault-logged","1")}
function logout(){aesKey=null,localStorage.removeItem("vault-logged"),document.getElementById("screen-auth").classList.remove("hidden"),document.getElementById("screen-app").classList.add("hidden")}
async function addTx(e,t,n,a){const o=await encryptJSON(aesKey,{date:e,description:t,amount:parseFloat(n||0),category:a});await txAdd(o)}
async function listTx(){const e=await txAll(),t=[];for(const n of e)try{t.push(await decryptJSON(aesKey,n))}catch(e){}return t.reverse()}
function renderRows(e){const t=document.getElementById("tbody");t.innerHTML=e.map((e=>`\n    <tr>\n      <td>${e.date||""}</td>\n      <td>${e.description||""}</td>\n      <td>${e.category||""}</td>\n      <td class="right">${(e.amount||0).toFixed(2)} CHF</td>\n    </tr>`)).join("");const n=e.reduce(((e,t)=>e+(t.amount||0)),0);document.getElementById("sum").textContent=n.toFixed(2)}
function parseCSV(e,t){const n=e.split(/\r?\n/).filter((e=>e.trim().length));if(!n.length)return[];n[0].split(t).map((e=>e.trim()));return n.slice(1).map((e=>{const n=e.split(t),a={};return n.forEach(((e,t)=>a[t]=e)),a}))}
window.addEventListener("load",(async()=>{"serviceWorker"in navigator&&await navigator.serviceWorker.register("./sw.js");"1"===localStorage.getItem("vault-logged")&&(document.getElementById("screen-auth").classList.add("hidden"),document.getElementById("screen-app").classList.remove("hidden")),document.getElementById("btn-login").onclick=async()=>{const e=document.getElementById("password").value;try{await login(e),document.getElementById("screen-auth").classList.add("hidden"),document.getElementById("screen-app").classList.remove("hidden"),renderRows(await listTx())}catch(e){alert("Passwort falsch oder Tresor beschädigt."),console.error(e)}},document.getElementById("btn-logout").onclick=logout,document.getElementById("btn-add").onclick=async()=>{const e=document.getElementById("tx-date").value,t=document.getElementById("tx-desc").value,n=document.getElementById("tx-amount").value,a=document.getElementById("tx-cat").value;await addTx(e,t,n,a),document.getElementById("tx-desc").value="",document.getElementById("tx-amount").value="",document.getElementById("tx-cat").value="",renderRows(await listTx())},document.getElementById("btn-import").onclick=async()=>{const e=document.getElementById("csv-file").files[0];if(!e)return alert("Bitte CSV wählen.");const t=document.getElementById("csv-delim").value||",",n=document.getElementById("csv-date").value||"date",a=document.getElementById("csv-desc").value||"description",o=document.getElementById("csv-amount").value||"amount",d=document.getElementById("csv-cat").value||"",c=await e.text(),l=c.split(/\r?\n/).filter((e=>e.trim().length));if(!l.length)return;const s=l[0].split(t).map((e=>e.trim())),i=l.slice(1).map((e=>{const n=e.split(t),a={};return s.forEach(((e,t)=>a[e]=n[t])),a}));for(const e of i)await addTx(e[n]||"",e[a]||"",e[o]||"0",d?e[d]||"": "");renderRows(await listTx()),alert("Import abgeschlossen.")};"1"===localStorage.getItem("vault-logged")&&renderRows(await listTx())}));
